import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sc
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.statespace.sarimax import SARIMAX

# Load and clean data
data = pd.read_csv('/content/AirPassengers (1).csv')
data.dropna(inplace=True)
data.drop_duplicates(inplace=True)

# Rename columns
data.columns = ['Month_data', 'Passengers']
data['Month_data'] = pd.to_datetime(data['Month_data'])

# Set index
data.set_index('Month_data', inplace=True)

# ADF test - check stationarity
result = adfuller(data['Passengers'])
print('ADF Statistic:', result[0])
print('p-value:', result[1])
if result[1] <= 0.05:
    print("✅ The series is stationary")
else:
    print("❌ The series is non-stationary")

# Differencing to make stationary
rolling_mean = data.rolling(window=12).mean()
data_diff = data - rolling_mean
data_diff.dropna(inplace=True)

# Plot rolling mean & std
mean = data_diff.rolling(window=12).mean()
std = data_diff.rolling(window=12).std()
plt.figure(figsize=(10,6))
plt.plot(data_diff, color='blue', label='Original - Rolling Mean')
plt.plot(mean, color='red', label='Rolling Mean')
plt.plot(std, color='black', label='Rolling Std')
plt.legend(loc='best')
plt.title('Stationarity Check')
plt.show()

# ADF test after differencing
result2 = adfuller(data_diff['Passengers'])
print('ADF Statistic (after differencing):', result2[0])
print('p-value:', result2[1])
if result2[1] <= 0.05:
    print("✅ The series is now stationary")
else:
    print("❌ The series is still non-stationary")

# Split into train and test
train = data_diff.iloc[:120]
test = data_diff.iloc[120:]

# Build SARIMAX model
model = SARIMAX(train,
                order=(3,0,2),
                seasonal_order=(3,0,2,12),
                enforce_stationarity=False,
                enforce_invertibility=False)
model_fit = model.fit()

# Forecast
pred = model_fit.predict(start=len(train), end=len(train)+len(test)-1)
data_diff.loc[test.index, 'prediction'] = pred

# Plot prediction vs actual
plt.figure(figsize=(10,6))
plt.plot(data_diff['Passengers'], label='Actual')
plt.plot(data_diff['prediction'], label='Predicted', linestyle='--')
plt.legend()
plt.title('SARIMAX Forecast on Differenced Data')
plt.show()

# Forecast future values (on differenced scale)
forecast_steps = 24
future_forecast = model_fit.get_forecast(steps=forecast_steps)
future_pred = future_forecast.predicted_mean

# Plot full forecast
plt.figure(figsize=(10,6))
plt.plot(data_diff['Passengers'], label='Historical')
future_pred.plot(label='Future Forecast', color='green')
plt.legend()
plt.title('Future Forecast using SARIMAX')
plt.show()
